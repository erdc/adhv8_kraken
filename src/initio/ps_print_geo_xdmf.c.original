/* writes the Geometry information to HDF5 file */

#include "global_header.h"
#ifdef _ADH_HDF5
#include "adh_hdf5.h"
#endif

void ps_print_geo_xdmf(
#ifdef _ADH_HDF5
    SMODEL *mod
#endif
    )
{
#ifdef _ADH_HDF5
  hid_t dataspace, dataset, aid, attr;
  herr_t status;
  hsize_t dims[2];
  char string[MAXLINE];
  int ie, ii, ielem, jj;
  int nelem;                    /* the number of elements */
  int num_ghosts;
  int nodes_per_elem;
  int *elem_conn;               /* element connectivity table; has dimensions (nodes_per_elem) x (nelem) */
  int *node_map_data;           /* used to pack node_map structure data */
  int *value_array;             /* temporary vector to store values for printing */
  double *node_coords;
  int *ghost_nodes;
  int compression;              /* turn on/off compression */
  int total_nnodes;             /* global number of nodes across all processors */
  int total_nelems;             /* global number of elements across all processors */
  int my_nelems = 0;            /* number of elements "owned" by this processor */
  int owner;
  
  /*no compresiion for now
  compression = print_control.hdf5_compression;
  cna be enabled later LP */
  SGRID *grid = mod->grid;
  HDF5 *hdf5 = &(mod->hdf5);
  int my_nnode = grid->my_nnodes;
  int nnode = grid->nnodes;
  int nelem3d = grid->nelems3d;
  int nelem2d = grid->nelems2d;
  int npes = grid->smpi->npes;
  int myid = grid->smpi->myid;
    
    tag(cstorm_comm);

  compression = 0;
  hdf5->current_mesh++;
  total_nnodes=0;
#ifdef _MESSG
  total_nnodes = messg_isum(my_nnode, grid->smpi->ADH_COMM);
#else
  total_nnodes = grid->nnodes;
#endif
    
    tag(cstorm_comm);

  if (grid->haveTets == TRUE)
    {
      nelem = nelem3d;
      nodes_per_elem = 4;
    }
  else if (grid->havePrisms == TRUE)
    {
      nelem = nelem3d;
      nodes_per_elem = 6;
    }
  else if (grid->haveTris == TRUE)
    {
      nelem = nelem2d;
      nodes_per_elem = 3;
    }
    
    tag(cstorm_comm);


   /* Fill in connectivity table and count the elements "owned".
   * Element ownership is determined by the nodes' lowest ownership. 
   * Need to switch on element type because we have two different structures */
  elem_conn = (int *) tl_alloc(sizeof(int), nelem * nodes_per_elem);
    
    tag(cstorm_comm);


  if (nelem3d > 0)
    {
        printf("3d nelem: %d nodes_per_elem: %d\n",nelem,nodes_per_elem);
      for (ielem = 0; ielem < nelem; ielem++)
        {
          owner = npes;
          for (jj = 0; jj < nodes_per_elem; jj++)
            {
              elem_conn[ielem * nodes_per_elem + jj] = grid->elem3d[ielem].nodes[jj];
#ifdef _MESSG
              owner = MIN(grid->node[grid->elem3d[ielem].nodes[jj]].resident_pe, owner);
#else
              owner = myid;
#endif
            }
          if (owner == myid)
            {
              ++my_nelems;
            }
        }
    }
  else
    {
        printf("2d nelem: %d nodes_per_elem: %d\n",nelem,nodes_per_elem);
      for (ielem = 0; ielem < nelem; ielem++)
        {
          owner = npes;
          for (jj = 0; jj < nodes_per_elem; jj++)
            {
              elem_conn[ielem * nodes_per_elem + jj] = grid->elem2d[ielem].nodes[jj];
#ifdef _MESSG
              owner = MIN(grid->node[grid->elem2d[ielem].nodes[jj]].resident_pe, owner);
#else
              owner = myid;
#endif
            }
          if (owner == myid)
            {
              ++my_nelems;
            }
        }
    }
#ifdef _MESSG
  total_nelems = messg_isum(my_nelems, grid->smpi->ADH_COMM);
#else
  total_nelems = my_nelems;
#endif
    
    tag(cstorm_comm);

  /* Fill in nodal coordinate */
  node_coords = (double *) tl_alloc(sizeof(double), 3 * nnode);

  for (ii = 0; ii < nnode; ii++)
    {
      node_coords[3 * ii] = grid->node[ii].x;
      node_coords[3 * ii + 1] = grid->node[ii].y;
      node_coords[3 * ii + 2] = grid->node[ii].z;
    }

    
    tag(cstorm_comm);
    
    
  /* Write out the element connectivity */
  dims[0] = nelem;
  dims[1] = nodes_per_elem;
  snprintf(string, MAXLINE, "%d", hdf5->current_mesh);
  xdmf_write_dataset(hdf5->group_elements, string, H5T_NATIVE_INT, compression, 2, dims, elem_conn);
  /* Add the global number of elements as an attribute to element connectivity data set */
  dims[0] = 1;
  dataset = H5Dopen(hdf5->group_elements, string, H5P_DEFAULT);
  aid = H5Screate_simple(1, dims, NULL);
  attr = H5Acreate(dataset, "global_nelem", H5T_NATIVE_INT, aid, H5P_DEFAULT, H5P_DEFAULT);
  H5Awrite(attr, H5T_NATIVE_INT, &total_nelems);
  status = H5Aclose(attr);
  status = H5Sclose(aid);
  status = H5Dclose(dataset);
    
    tag(cstorm_comm);

  /* Write out the nodal coordinates */
  dims[0] = nnode;
  dims[1] = 3;
  snprintf(string, MAXLINE, "%d", hdf5->current_mesh);
  xdmf_write_dataset(hdf5->group_nodes, string, H5T_NATIVE_DOUBLE, compression, 2, dims, node_coords);

  /* Write out the ghost nodes */
  num_ghosts = nnode - my_nnode;
  if (num_ghosts > 0)
    {
      ghost_nodes = (int *) tl_alloc(sizeof(int), num_ghosts);
      for (ii = 0; ii < num_ghosts; ii++)
        {
          ghost_nodes[ii] = my_nnode + ii;
        }
      dims[0] = num_ghosts;
      snprintf(string, MAXLINE, "%d", hdf5->current_mesh);
      xdmf_write_dataset(hdf5->group_ghost_nodes, string, H5T_NATIVE_INT, compression, 1, dims, ghost_nodes);
      ghost_nodes = (int *) tl_free(sizeof(int), num_ghosts, ghost_nodes);
    }
    
    tag(cstorm_comm);

  /* Add the global and processor's number of nodes as attributes to the nodes data set */
  dims[0] = 1;
  dataset = H5Dopen(hdf5->group_nodes, string, H5P_DEFAULT);
  aid = H5Screate_simple(1, dims, NULL);
  attr = H5Acreate(dataset, "global_nnode", H5T_NATIVE_INT, aid, H5P_DEFAULT, H5P_DEFAULT);
  H5Awrite(attr, H5T_NATIVE_INT, &total_nnodes);
  attr = H5Acreate(dataset, "my_nnode", H5T_NATIVE_INT, aid, H5P_DEFAULT, H5P_DEFAULT);
  H5Awrite(attr, H5T_NATIVE_INT, &my_nnode);
  status = H5Sclose(aid);
  status = H5Aclose(attr);
  status = H5Dclose(dataset);
    
    tag(cstorm_comm);

  /* Write out the original node numbers */
  dims[0] = nnode;
  int *orig_nd_number = (int *) tl_alloc(sizeof(int), nnode);
  for (ii=0; ii<nnode; ii++){
    orig_nd_number[ii] = grid->node[ii].original_id;
  }
  xdmf_write_dataset(hdf5->group_orig_nd, string, H5T_NATIVE_INT, compression, 1, dims, orig_nd_number);
  orig_nd_number = (int*) tl_free(sizeof(int), nnode, orig_nd_number);

  /* Write out original material ID */
  dims[0] = nelem;
  snprintf(string, MAXLINE, "%d", hdf5->current_mesh);
  if (grid->haveTets == TRUE || grid->havePrisms == TRUE)
    {
      value_array = (int *) tl_alloc(sizeof(int), nelem3d);
      for (ie = 0; ie < nelem3d; ie++)
        {
          value_array[ie] = grid->elem3d[ie].mat + 1;
        }
      xdmf_write_dataset(hdf5->group_mat_id, string, H5T_NATIVE_INT, compression, 1, dims, value_array);
      value_array = (int *) tl_free(sizeof(int), nelem3d, value_array);
    }
  else if (grid->haveTris == TRUE)
    {
      value_array = (int *) tl_alloc(sizeof(int), nelem2d);
      for (ie = 0; ie < nelem2d; ie++)
        {
          value_array[ie] = grid->elem2d[ie].mat + 1;
        }
      xdmf_write_dataset(hdf5->group_mat_id, string, H5T_NATIVE_INT, compression, 1, dims, value_array);
      value_array = (int *) tl_free(sizeof(int), nelem2d, value_array);
    }

  /* Pack node_map data and write it out */
  node_map_data = (int *) tl_alloc(sizeof(int), 2 * nnode);
  for (ii = 0; ii < nnode; ii++)
    {
#ifdef _MESSG
      node_map_data[2 * ii] = grid->node[ii].resident_pe; 
      node_map_data[2 * ii + 1] = grid->node[ii].gid;
#else
      node_map_data[2 * ii] = myid;
      node_map_data[2 * ii + 1] = ii;
#endif 
    }

  dims[0] = nnode;
  dims[1] = 2;
  snprintf(string, MAXLINE, "%d", hdf5->current_mesh);
  xdmf_write_dataset(hdf5->group_node_map, string, H5T_NATIVE_INT, compression, 2, dims, node_map_data);
  node_map_data = (int *) tl_free(sizeof(int), 2 * nnode, node_map_data);
  elem_conn = (int *) tl_free(sizeof(int), nelem * nodes_per_elem, elem_conn);
  node_coords = (double *) tl_free(sizeof(double), 3 * nnode, node_coords);
#endif
  return;
}

